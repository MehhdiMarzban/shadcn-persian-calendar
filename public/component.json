{
  "name": "component",
  "type": "registry:ui",
  "registryDependencies": [
    "button"
  ],
  "dependencies": [
    "lucide-react",
    "date-fns@4.1.0",
    "react-day-picker@9.5.0"
  ],
  "devDependencies": [],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "colors": {}
        }
      }
    }
  },
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "component.tsx",
      "content": "\"use client\";\nimport { DayPicker, getDateLib } from \"react-day-picker/persian\";\nimport { Button, buttonVariants } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { differenceInCalendarDays } from \"date-fns\";\nimport { ChevronLeftIcon, ChevronRightIcon } from \"lucide-react\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { labelNext, labelPrevious, useDayPicker } from \"react-day-picker\";\n\nfunction PersianCalendar({\n    className = \"\",\n    showOutsideDays = true,\n    showYearSwitcher = true,\n    // mode = \"single\",\n    yearRange = 12,\n    numberOfMonths = 1,\n    ...props\n}) {\n    const [navView, setNavView] = useState(\"days\");\n    const [displayYears, setDisplayYears] = useState(\n        useMemo(() => {\n            const currentYear = new Date().getFullYear();\n            return {\n                from: currentYear - Math.floor(yearRange / 2 - 1),\n                to: currentYear + Math.ceil(yearRange / 2),\n            };\n        }, [yearRange])\n    );\n\n    const { onNextClick, onPrevClick, startMonth, endMonth } = props;\n\n    const columnsDisplayed = navView === \"years\" ? 1 : numberOfMonths;\n\n    const _monthsClassName = cn(\"relative flex\", props.monthsClassName);\n    const _monthCaptionClassName = cn(\n        \"relative mx-10 flex h-7 items-center justify-center\",\n        props.monthCaptionClassName\n    );\n    const _weekdaysClassName = cn(\"flex flex-row\", props.weekdaysClassName);\n    const _weekdayClassName = cn(\n        \"w-8 text-sm font-normal text-muted-foreground\",\n        props.weekdayClassName\n    );\n    const _monthClassName = cn(\"w-full\", props.monthClassName);\n    const _captionClassName = cn(\n        \"relative flex items-center justify-center pt-1\",\n        props.captionClassName\n    );\n    const _captionLabelClassName = cn(\"truncate text-sm font-medium\", props.captionLabelClassName);\n    const buttonNavClassName = buttonVariants({\n        variant: \"outline\",\n        className: \"absolute h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\",\n    });\n    const _buttonNextClassName = cn(buttonNavClassName, \"right-0\", props.buttonNextClassName);\n    const _buttonPreviousClassName = cn(\n        buttonNavClassName,\n        \"left-0\",\n        props.buttonPreviousClassName\n    );\n    const _navClassName = cn(\"flex items-start\", props.navClassName);\n    const _monthGridClassName = cn(\"mx-auto mt-4\", props.monthGridClassName);\n    const _weekClassName = cn(\"mt-2 flex w-max items-start\", props.weekClassName);\n    const _dayClassName = cn(\n        \"flex size-8 flex-1 items-center justify-center p-0 text-sm\",\n        props.dayClassName\n    );\n    const _dayButtonClassName = cn(\n        buttonVariants({ variant: \"ghost\" }),\n        \"size-8 rounded-md p-0 font-normal transition-none aria-selected:opacity-100\",\n        props.dayButtonClassName\n    );\n    const buttonRangeClassName =\n        \"bg-accent [&>button]:bg-primary [&>button]:text-primary-foreground [&>button]:hover:bg-primary [&>button]:hover:text-primary-foreground\";\n    const _rangeStartClassName = cn(\n        buttonRangeClassName,\n        \"day-range-start rounded-s-md\",\n        props.rangeStartClassName\n    );\n    const _rangeEndClassName = cn(\n        buttonRangeClassName,\n        \"day-range-end rounded-e-md\",\n        props.rangeEndClassName\n    );\n    const _rangeMiddleClassName = cn(\n        \"bg-accent !text-foreground [&>button]:bg-transparent [&>button]:!text-foreground [&>button]:hover:bg-transparent [&>button]:hover:!text-foreground\",\n        props.rangeMiddleClassName\n    );\n    const _selectedClassName = cn(\n        \"[&>button]:bg-primary [&>button]:text-primary-foreground [&>button]:hover:bg-primary [&>button]:hover:text-primary-foreground\",\n        props.selectedClassName\n    );\n    const _todayClassName = cn(\n        \"[&>button]:bg-accent [&>button]:text-accent-foreground\",\n        props.todayClassName\n    );\n    const _outsideClassName = cn(\n        \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        props.outsideClassName\n    );\n    const _disabledClassName = cn(\"text-muted-foreground opacity-50\", props.disabledClassName);\n    const _hiddenClassName = cn(\"invisible flex-1\", props.hiddenClassName);\n\n    // Initialize the Persian date library\n    const dateLib = getDateLib();\n\n    return (\n        <DayPicker\n            broadcastCalendar\n            firstWeekContainsDate={1}\n            mode={\"single\"}\n            numerals=\"arabext\"\n            timeZone=\"Asia/Tehran\"\n            weekStartsOn={6}\n            showOutsideDays={showOutsideDays}\n            className={cn(\"p-3\", className)}\n            style={{\n                width: 248.8 * (columnsDisplayed ?? 1) + \"px\",\n            }}\n            classNames={{\n                months: _monthsClassName,\n                month_caption: _monthCaptionClassName,\n                weekdays: _weekdaysClassName,\n                weekday: _weekdayClassName,\n                month: _monthClassName,\n                caption: _captionClassName,\n                caption_label: _captionLabelClassName,\n                button_next: _buttonNextClassName,\n                button_previous: _buttonPreviousClassName,\n                nav: _navClassName,\n                month_grid: _monthGridClassName,\n                week: _weekClassName,\n                day: _dayClassName,\n                day_button: _dayButtonClassName,\n                range_start: _rangeStartClassName,\n                range_middle: _rangeMiddleClassName,\n                range_end: _rangeEndClassName,\n                selected: _selectedClassName,\n                today: _todayClassName,\n                outside: _outsideClassName,\n                disabled: _disabledClassName,\n                hidden: _hiddenClassName,\n            }}\n            components={{\n                Chevron: ({ orientation }) => {\n                    const Icon = orientation === \"left\" ? ChevronLeftIcon : ChevronRightIcon;\n                    return <Icon className=\"h-4 w-4\" />;\n                },\n                Nav: ({ className }) => {\n                    const { nextMonth, previousMonth, goToMonth } = useDayPicker();\n\n                    const isPreviousDisabled = (() => {\n                        if (navView === \"years\") {\n                            return (\n                                (startMonth &&\n                                    differenceInCalendarDays(\n                                        new Date(displayYears.from - 1, 0, 1),\n                                        startMonth\n                                    ) < 0) ||\n                                (endMonth &&\n                                    differenceInCalendarDays(\n                                        new Date(displayYears.from - 1, 0, 1),\n                                        endMonth\n                                    ) > 0)\n                            );\n                        }\n                        return !previousMonth;\n                    })();\n\n                    const isNextDisabled = (() => {\n                        if (navView === \"years\") {\n                            return (\n                                (startMonth &&\n                                    differenceInCalendarDays(\n                                        new Date(displayYears.to + 1, 0, 1),\n                                        startMonth\n                                    ) < 0) ||\n                                (endMonth &&\n                                    differenceInCalendarDays(\n                                        new Date(displayYears.to + 1, 0, 1),\n                                        endMonth\n                                    ) > 0)\n                            );\n                        }\n                        return !nextMonth;\n                    })();\n\n                    const handleNextClick = useCallback(() => {\n                        if (!previousMonth) return;\n                        if (navView === \"years\") {\n                            setDisplayYears((prev) => ({\n                                from: prev.from - (prev.to - prev.from + 1),\n                                to: prev.to - (prev.to - prev.from + 1),\n                            }));\n                            onPrevClick?.(\n                                new Date(\n                                    displayYears.from - (displayYears.to - displayYears.from),\n                                    0,\n                                    1\n                                )\n                            );\n                            return;\n                        }\n                        goToMonth(previousMonth);\n                        onPrevClick?.(previousMonth);\n                    }, [previousMonth, goToMonth]);\n                    // handleNextClick\n                    const handlePreviousClick = useCallback(() => {\n                        if (!nextMonth) return;\n                        if (navView === \"years\") {\n                            setDisplayYears((prev) => ({\n                                from: prev.from + (prev.to - prev.from + 1),\n                                to: prev.to + (prev.to - prev.from + 1),\n                            }));\n                            onNextClick?.(\n                                new Date(\n                                    displayYears.from + (displayYears.to - displayYears.from),\n                                    0,\n                                    1\n                                )\n                            );\n                            return;\n                        }\n                        goToMonth(nextMonth);\n                        onNextClick?.(nextMonth);\n                    }, [goToMonth, nextMonth]);\n                    return (\n                        <nav className={cn(\"flex items-center\", className)}>\n                            <Button\n                                variant=\"outline\"\n                                className=\"absolute left-0 h-7 w-7 bg-transparent p-0 opacity-80 hover:opacity-100\"\n                                type=\"button\"\n                                tabIndex={isPreviousDisabled ? undefined : -1}\n                                disabled={isPreviousDisabled}\n                                aria-label={\n                                    navView === \"years\"\n                                        ? `Go to the previous ${\n                                              displayYears.to - displayYears.from + 1\n                                          } years`\n                                        : labelPrevious(previousMonth)\n                                }\n                                onClick={handlePreviousClick}>\n                                <ChevronLeftIcon className=\"h-4 w-4\" />\n                            </Button>\n\n                            <Button\n                                variant=\"outline\"\n                                className=\"absolute right-0 h-7 w-7 bg-transparent p-0 opacity-80 hover:opacity-100\"\n                                type=\"button\"\n                                tabIndex={isNextDisabled ? undefined : -1}\n                                disabled={isNextDisabled}\n                                aria-label={\n                                    navView === \"years\"\n                                        ? `Go to the next ${\n                                              displayYears.to - displayYears.from + 1\n                                          } years`\n                                        : labelNext(nextMonth)\n                                }\n                                onClick={handleNextClick}>\n                                <ChevronRightIcon className=\"h-4 w-4\" />\n                            </Button>\n                        </nav>\n                    );\n                },\n                CaptionLabel: ({ children, ...props }) => {\n                    if (!showYearSwitcher) return <span {...props}>{children}</span>;\n\n                    const persianFromYear = dateLib.getYear(new Date(displayYears.from, 0, 1)); // Convert 'from' year\n                    const persianToYear = dateLib.getYear(new Date(displayYears.to, 0, 1));\n                    return (\n                        <Button\n                            className=\"h-7 w-full truncate text-sm font-medium\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() =>\n                                setNavView((prev) => (prev === \"days\" ? \"years\" : \"days\"))\n                            }>\n                            {navView === \"days\"\n                                ? children\n                                : `${persianFromYear} - ${persianToYear}`}\n                        </Button>\n                    );\n                },\n                MonthGrid: ({ className, children, ...props }) => {\n                    const { goToMonth, selected } = useDayPicker();\n                    if (navView === \"years\") {\n                        return (\n                            <div className={cn(\"grid grid-cols-4 gap-y-2\", className)} {...props}>\n                                {Array.from(\n                                    { length: displayYears.to - displayYears.from + 1 },\n                                    (_, i) => {\n                                        // Create a full Date object for conversion\n                                        const fullDate = new Date(displayYears.from + i, 0, 1); // January 1st of each year\n\n                                        // Convert the full date to Persian\n                                        const persianYear = dateLib.getYear(fullDate);\n\n                                        const isBefore =\n                                            differenceInCalendarDays(\n                                                new Date(displayYears.from + i, 11, 31),\n                                                startMonth\n                                            ) < 0;\n\n                                        const isAfter =\n                                            differenceInCalendarDays(\n                                                new Date(displayYears.from + i, 0, 0),\n                                                endMonth\n                                            ) > 0;\n\n                                        const isDisabled = isBefore || isAfter;\n\n                                        return (\n                                            <Button\n                                                key={i}\n                                                className={cn(\n                                                    \"h-7 w-full text-sm font-normal text-foreground\",\n                                                    persianYear === dateLib.getYear(new Date()) &&\n                                                        \"bg-accent font-medium text-accent-foreground\"\n                                                )}\n                                                variant=\"ghost\"\n                                                onClick={() => {\n                                                    setNavView(\"days\");\n                                                    goToMonth(\n                                                        new Date(\n                                                            displayYears.from + i,\n                                                            //@ts-expect-error fix\n                                                            selected?.getMonth?.() ?? 0\n                                                        )\n                                                    );\n                                                }}\n                                                disabled={\n                                                    navView === \"years\" ? isDisabled : undefined\n                                                }>\n                                                {persianYear}\n                                            </Button>\n                                        );\n                                    }\n                                )}\n                            </div>\n                        );\n                    }\n                    return (\n                        <table className={className} {...props}>\n                            {children}\n                        </table>\n                    );\n                },\n            }}\n            numberOfMonths={columnsDisplayed}\n            {...props}\n        />\n    );\n}\n\nPersianCalendar.displayName = \"PersianCalendar\";\n\nexport { PersianCalendar as Calendar };\n",
      "type": "registry:ui"
    }
  ]
}